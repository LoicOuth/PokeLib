generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
}

enum Role {
   ADMIN
   USER
}

model User {
   id            BigInt   @id @default(autoincrement())
   email         String   @unique
   pseudo        String   @unique
   password      String?
   avatar        String
   role          Role     @default(USER)
   google_uuid   String?  @unique
   registered_at DateTime @default(now())

   teams Team[]
}

model Team {
   id         BigInt   @id @default(autoincrement())
   name       String
   is_public  Boolean  @default(false)
   created_at DateTime @default(now())
   updated_at DateTime @default(now()) @updatedAt
   user_id    BigInt

   user           User            @relation(fields: [user_id], references: [id])
   pokemons_teams PokemonToTeam[]
}

model Type {
   id          BigInt @id @default(autoincrement())
   poke_api_id BigInt @unique
   name        String @unique
   color       String
   sprite      String

   pokemons_first  Pokemon[] @relation(name: "first_type")
   pokemons_second Pokemon[] @relation(name: "second_type")
}

model Ability {
   id   BigInt @id @default(autoincrement())
   name String @unique

   pokemons_teams PokemonToTeam[]
   pokemons       AbilityToPokemon[]
}

model Evolution {
   id                   BigInt  @id @default(autoincrement())
   condition            String?
   pokemon_id           BigInt
   pokemon_evolution_id BigInt

   pokemon           Pokemon @relation(name: "pokemon_evolution", fields: [pokemon_id], references: [id])
   pokemon_evolution Pokemon @relation(name: "pokemon_evolution_1", fields: [pokemon_evolution_id], references: [id])
}

model MegaEvolution {
   id             BigInt @id @default(autoincrement())
   orbe           String
   sprite_regular String
   sprite_shiny   String
   pokemon_id     BigInt

   pokemon Pokemon @relation(fields: [pokemon_id], references: [id])
}

model Pokemon {
   id             BigInt  @id @default(autoincrement())
   pokedex_order  Int     @unique
   name           String  @unique
   description    String  @db.Text
   height         String
   weight         String
   generation     Int
   sprite_regular String
   sprite_shiny   String?
   sprite_gmax    String?
   hp             Int
   atk            Int
   def            Int
   spe_atk        Int
   spe_def        Int
   vit            Int
   first_type_id  BigInt
   second_type_id BigInt?

   first_type        Type               @relation(name: "first_type", fields: [first_type_id], references: [id])
   second_type       Type?              @relation(name: "second_type", fields: [second_type_id], references: [id])
   pokemons_teams    PokemonToTeam[]
   mega_evolutions   MegaEvolution[]
   evolutions        Evolution[]        @relation(name: "pokemon_evolution")
   evolutions_member Evolution[]        @relation(name: "pokemon_evolution_1")
   abilities         AbilityToPokemon[]
}

model PokemonToTeam {
   ability_id BigInt
   pokemon_id BigInt
   team_id    BigInt

   pokemon Pokemon @relation(fields: [pokemon_id], references: [id])
   team    Team    @relation(fields: [team_id], references: [id])
   ability Ability @relation(fields: [ability_id], references: [id])

   @@id([pokemon_id, team_id])
}

model AbilityToPokemon {
   is_hidden  Boolean
   ability_id BigInt
   pokemon_id BigInt

   ability Ability @relation(fields: [ability_id], references: [id])
   pokemon Pokemon @relation(fields: [pokemon_id], references: [id])

   @@id([pokemon_id, ability_id])
}
